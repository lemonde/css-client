// Generated by CoffeeScript 1.8.0
(function() {
  var parseCss, stringifyCss,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  parseCss = require('css-parse');

  stringifyCss = require('css-stringify');

  module.exports = function(css) {
    var intervalRules, m, media, mediaRules, medias, onlyMaxRules, onlyMinRules, otherRules, parsed, rootRules, rule, rules, _i, _len, _ref;
    parsed = parseCss(css);
    medias = {};
    rootRules = [];
    _ref = parsed.stylesheet.rules;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rule = _ref[_i];
      if (rule.type === 'media') {
        if (!medias[rule.media]) {
          medias[rule.media] = [];
        }
        medias[rule.media] = medias[rule.media].concat(rule.rules);
      } else {
        rootRules.push(rule);
      }
    }
    mediaRules = [];
    for (media in medias) {
      rules = medias[media];
      rule = {
        type: "media",
        media: media,
        rules: rules
      };
      if (media.indexOf("min-width") !== -1) {
        m = media.match(/min-width:\s*([1-9][0-9]*)px/);
        if (m[1]) {
          rule.minWidth = parseInt(m[1]);
        }
      }
      if (media.indexOf("max-width") !== -1) {
        m = media.match(/max-width:\s*([1-9][0-9]*)px/);
        if (m[1]) {
          rule.maxWidth = parseInt(m[1]);
        }
      }
      mediaRules.push(rule);
    }
    onlyMinRules = mediaRules.filter(function(rule) {
      return rule.minWidth && !rule.maxWidth;
    });
    onlyMaxRules = mediaRules.filter(function(rule) {
      return rule.maxWidth && !rule.minWidth;
    });
    intervalRules = mediaRules.filter(function(rule) {
      return rule.minWidth && rule.maxWidth;
    });
    otherRules = mediaRules.filter(function(rule) {
      return __indexOf.call(onlyMinRules.concat(onlyMaxRules).concat(intervalRules), rule) < 0;
    });
    onlyMinRules.sort(function(a, b) {
      return a.minWidth - b.minWidth;
    });
    onlyMaxRules.sort(function(a, b) {
      return b.maxWidth - a.maxWidth;
    });
    parsed.stylesheet.rules = rootRules.concat(onlyMinRules).concat(onlyMaxRules).concat(intervalRules).concat(otherRules);
    return stringifyCss(parsed);
  };

}).call(this);
